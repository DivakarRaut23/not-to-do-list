{"ast":null,"code":"import { requestPending, addTaskSuccess, requestFail } from './taskSlice.js';\nimport { createTask } from '../../api/taskApi.js';\nexport const addTask = formData => async dispatch => {\n  try {\n    dispatch(requestPending());\n    const result = await createTask(formData);\n    dispatch(addTaskSuccess(result)); // result.status === \"success\" && getAllTask();\n  } catch (error) {\n    dispatch(requestFail(error.message));\n  }\n};\n\nconst fetchTaskLists = () => async dispatch => {\n  try {\n    dispatch(requestPending());\n    const fetchTask = (await getTaskLists()) || [];\n  } catch (error) {\n    dispatch(requestFail(error.message));\n  }\n};","map":{"version":3,"sources":["/Users/thewalker/Documents/bootcamp/react-not-to-do-list/src/components/taskList/taskAction.js"],"names":["requestPending","addTaskSuccess","requestFail","createTask","addTask","formData","dispatch","result","error","message","fetchTaskLists","fetchTask","getTaskLists"],"mappings":"AAAA,SAAQA,cAAR,EAAuBC,cAAvB,EAAsCC,WAAtC,QAAwD,gBAAxD;AACA,SAAQC,UAAR,QAAyB,sBAAzB;AAEA,OAAO,MAAMC,OAAO,GAAGC,QAAQ,IAAI,MAAMC,QAAN,IAAkB;AACjD,MAAI;AACAA,IAAAA,QAAQ,CAACN,cAAc,EAAf,CAAR;AACA,UAAMO,MAAM,GAAG,MAAMJ,UAAU,CAACE,QAAD,CAA/B;AACAC,IAAAA,QAAQ,CAACL,cAAc,CAACM,MAAD,CAAf,CAAR,CAHA,CAKA;AAEH,GAPD,CAOE,OAAOC,KAAP,EAAc;AACZF,IAAAA,QAAQ,CAACJ,WAAW,CAACM,KAAK,CAACC,OAAP,CAAZ,CAAR;AACH;AACJ,CAXM;;AAaP,MAAMC,cAAc,GAAG,MAAM,MAAMJ,QAAN,IAAkB;AAC3C,MAAI;AACAA,IAAAA,QAAQ,CAACN,cAAc,EAAf,CAAR;AACA,UAAMW,SAAS,GAAG,OAAMC,YAAY,EAAlB,KAAwB,EAA1C;AAEH,GAJD,CAIE,OAAOJ,KAAP,EAAc;AACZF,IAAAA,QAAQ,CAACJ,WAAW,CAACM,KAAK,CAACC,OAAP,CAAZ,CAAR;AAEH;AACJ,CATD","sourcesContent":["import {requestPending,addTaskSuccess,requestFail} from './taskSlice.js'\nimport {createTask} from '../../api/taskApi.js'\n\nexport const addTask = formData => async dispatch => {\n    try {\n        dispatch(requestPending());\n        const result = await createTask(formData);\n        dispatch(addTaskSuccess(result))\n\n        // result.status === \"success\" && getAllTask();\n        \n    } catch (error) {\n        dispatch(requestFail(error.message))\n    }\n}\n\nconst fetchTaskLists = () => async dispatch => {\n    try {\n        dispatch(requestPending());\n        const fetchTask = await getTaskLists() || [];\n        \n    } catch (error) {\n        dispatch(requestFail(error.message))\n        \n    }\n}"]},"metadata":{},"sourceType":"module"}