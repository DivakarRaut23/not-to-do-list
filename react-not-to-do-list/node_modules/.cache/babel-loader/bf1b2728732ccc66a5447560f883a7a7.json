{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  taskList: [],\n  notToDoList: [],\n  totalHour: 0,\n  isPending: false,\n  status: \"\",\n  message: \"\"\n};\nconst taskSlice = createSlice({\n  name: \"task\",\n  initialState,\n  reducers: {\n    requestPending: state => {\n      state.isPending = true;\n    },\n    addTaskSuccess: (state, action) => {\n      state.isPending = false;\n      state.status = action.payload.status;\n      state.message = action.payload.message;\n    },\n    addTaskSuccess: (state, action) => {\n      state.isPending = false;\n      state.status = action.payload.status;\n      state.message = action.payload.message;\n    },\n    fetchTaskSuccess: (state, {\n      payload = []\n    }) => {\n      state.isPending = false;\n      state.taskList = payload.filter(noList => noList.todo);\n      state.notToDoList = payload.filter(noList => !noList.todo);\n    },\n    requestFail: (state, {\n      payload\n    }) => {\n      state.isPending = false;\n      state.status = \"error\";\n      state.message = payload;\n    }\n  }\n});\nconst {\n  reducer,\n  actions\n} = taskSlice;\nexport const {\n  requestPending,\n  addTaskSuccess,\n  requestFail,\n  fetchTaskSuccess\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["/Users/thewalker/Documents/bootcamp/react-not-to-do-list/src/components/taskList/taskSlice.js"],"names":["createSlice","initialState","taskList","notToDoList","totalHour","isPending","status","message","taskSlice","name","reducers","requestPending","state","addTaskSuccess","action","payload","fetchTaskSuccess","filter","noList","todo","requestFail","reducer","actions"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,kBAA1B;AAEA,MAAMC,YAAY,GAAG;AAEjBC,EAAAA,QAAQ,EAAG,EAFM;AAGjBC,EAAAA,WAAW,EAAE,EAHI;AAIjBC,EAAAA,SAAS,EAAG,CAJK;AAKjBC,EAAAA,SAAS,EAAG,KALK;AAMjBC,EAAAA,MAAM,EAAG,EANQ;AAOjBC,EAAAA,OAAO,EAAE;AAPQ,CAArB;AAUA,MAAMC,SAAS,GAAGR,WAAW,CAAC;AAC1BS,EAAAA,IAAI,EAAE,MADoB;AAE1BR,EAAAA,YAF0B;AAG1BS,EAAAA,QAAQ,EAAG;AACPC,IAAAA,cAAc,EAAGC,KAAK,IAAI;AACtBA,MAAAA,KAAK,CAACP,SAAN,GAAkB,IAAlB;AACH,KAHM;AAIPQ,IAAAA,cAAc,EAAG,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAChCF,MAAAA,KAAK,CAACP,SAAN,GAAkB,KAAlB;AACAO,MAAAA,KAAK,CAACN,MAAN,GAAgBQ,MAAM,CAACC,OAAP,CAAeT,MAA/B;AACAM,MAAAA,KAAK,CAACL,OAAN,GAAgBO,MAAM,CAACC,OAAP,CAAeR,OAA/B;AACH,KARM;AASPM,IAAAA,cAAc,EAAG,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAChCF,MAAAA,KAAK,CAACP,SAAN,GAAkB,KAAlB;AACAO,MAAAA,KAAK,CAACN,MAAN,GAAgBQ,MAAM,CAACC,OAAP,CAAeT,MAA/B;AACAM,MAAAA,KAAK,CAACL,OAAN,GAAgBO,MAAM,CAACC,OAAP,CAAeR,OAA/B;AACH,KAbM;AAcPS,IAAAA,gBAAgB,EAAG,CAACJ,KAAD,EAAQ;AAACG,MAAAA,OAAO,GAAG;AAAX,KAAR,KAA2B;AAC1CH,MAAAA,KAAK,CAACP,SAAN,GAAkB,KAAlB;AACAO,MAAAA,KAAK,CAACV,QAAN,GAAiBa,OAAO,CAACE,MAAR,CAAgBC,MAAD,IAAYA,MAAM,CAACC,IAAlC,CAAjB;AACAP,MAAAA,KAAK,CAACT,WAAN,GAAoBY,OAAO,CAACE,MAAR,CAAgBC,MAAD,IAAY,CAACA,MAAM,CAACC,IAAnC,CAApB;AAEH,KAnBM;AAoBPC,IAAAA,WAAW,EAAG,CAACR,KAAD,EAAQ;AAACG,MAAAA;AAAD,KAAR,KAAsB;AAEhCH,MAAAA,KAAK,CAACP,SAAN,GAAkB,KAAlB;AACAO,MAAAA,KAAK,CAACN,MAAN,GAAe,OAAf;AACAM,MAAAA,KAAK,CAACL,OAAN,GAAgBQ,OAAhB;AAEH;AA1BM;AAHe,CAAD,CAA7B;AAiCA,MAAM;AAACM,EAAAA,OAAD;AAAUC,EAAAA;AAAV,IAAqBd,SAA3B;AAEA,OAAO,MAAM;AAACG,EAAAA,cAAD;AAAgBE,EAAAA,cAAhB;AAA+BO,EAAAA,WAA/B;AAA2CJ,EAAAA;AAA3C,IAA+DM,OAArE;AAEP,eAAeD,OAAf","sourcesContent":["import {createSlice} from '@reduxjs/toolkit'\n\nconst initialState = {\n\n    taskList : [],\n    notToDoList :[],\n    totalHour : 0,\n    isPending : false,\n    status : \"\",\n    message: \"\"\n};\n\nconst taskSlice = createSlice({\n    name: \"task\",\n    initialState,\n    reducers : {\n        requestPending : state => {\n            state.isPending = true\n        },\n        addTaskSuccess : (state, action) => {\n            state.isPending = false\n            state.status =  action.payload.status\n            state.message = action.payload.message\n        },\n        addTaskSuccess : (state, action) => {\n            state.isPending = false\n            state.status =  action.payload.status\n            state.message = action.payload.message\n        },\n        fetchTaskSuccess : (state, {payload = []}) => {\n            state.isPending = false\n            state.taskList = payload.filter((noList) => noList.todo)\n            state.notToDoList = payload.filter((noList) => !noList.todo)\n\n        },\n        requestFail : (state, {payload}) => {\n            \n            state.isPending = false;\n            state.status = \"error\"\n            state.message = payload\n\n        }\n    }\n})\n\nconst {reducer, actions} = taskSlice\n\nexport const {requestPending,addTaskSuccess,requestFail,fetchTaskSuccess} = actions;\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}