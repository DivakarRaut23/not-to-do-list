{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  taskList: [],\n  notToDoList: [],\n  itemToDelete: [],\n  totalHour: 0,\n  isPending: false,\n  status: \"\",\n  message: \"\"\n};\nconst taskSlice = createSlice({\n  name: \"task\",\n  initialState,\n  reducers: {\n    requestPending: state => {\n      state.isPending = true;\n    },\n    addTaskSuccess: (state, action) => {\n      state.isPending = false;\n      state.status = action.payload.status;\n      state.message = action.payload.message;\n    },\n    updateTaskSuccess: (state, {\n      payload\n    }) => {\n      state.isPending = false;\n      state.status = payload.status;\n      state.message = payload.message;\n    },\n    deleteTaskSuccess: (state, {\n      payload\n    }) => {\n      state.isPending = false;\n      state.status = payload.status;\n      state.message = payload.message;\n      payload.statusstate.itemToDelete = [];\n    },\n    setItemToDelete: (state, {\n      payload\n    }) => {\n      const {\n        checked,\n        value\n      } = payload;\n\n      if (checked) {\n        state.itemToDelete = [...state.itemToDelete, value];\n      } else {\n        const newList = state.itemToDelete.filter(item => item != value);\n        state.itemToDelete = newList;\n      }\n    },\n    fetchTaskSuccess: (state, {\n      payload = []\n    }) => {\n      state.isPending = false;\n      state.totalHour = payload.reduce((subTtl, row) => subTtl + +row.hr, 0);\n      state.taskList = payload.filter(noList => noList.todo);\n      state.notToDoList = payload.filter(noList => !noList.todo);\n    },\n    requestFail: (state, {\n      payload\n    }) => {\n      state.isPending = false;\n      state.status = \"error\";\n      state.message = payload;\n    }\n  }\n});\nconst {\n  reducer,\n  actions\n} = taskSlice;\nexport const {\n  requestPending,\n  addTaskSuccess,\n  requestFail,\n  fetchTaskSuccess,\n  updateTaskSuccess,\n  setItemToDelete,\n  deleteTaskSuccess\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["/Users/thewalker/Documents/bootcamp/react-not-to-do-list/src/components/taskList/taskSlice.js"],"names":["createSlice","initialState","taskList","notToDoList","itemToDelete","totalHour","isPending","status","message","taskSlice","name","reducers","requestPending","state","addTaskSuccess","action","payload","updateTaskSuccess","deleteTaskSuccess","statusstate","setItemToDelete","checked","value","newList","filter","item","fetchTaskSuccess","reduce","subTtl","row","hr","noList","todo","requestFail","reducer","actions"],"mappings":"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","sourcesContent":["import {createSlice} from '@reduxjs/toolkit'\n\nconst initialState = {\n\n    taskList : [],\n    notToDoList :[],\n    itemToDelete : [],\n    totalHour : 0,\n    isPending : false,\n    status : \"\",\n    message: \"\"\n};\n\nconst taskSlice = createSlice({\n    name: \"task\",\n    initialState,\n    reducers : {\n        requestPending : state => {\n            state.isPending = true\n        },\n        addTaskSuccess : (state, action) => {\n            state.isPending = false\n            state.status =  action.payload.status\n            state.message = action.payload.message\n        },\n        updateTaskSuccess : (state, {payload}) => {\n            state.isPending = false\n            state.status =  payload.status\n            state.message = payload.message\n        },\n        deleteTaskSuccess : (state, {payload}) => {\n            state.isPending = false\n            state.status =  payload.status\n            state.message = payload.message\n            payload.statusstate.itemToDelete= []\n        },\n        setItemToDelete : (state, {payload}) => {\n            const {checked, value} = payload\n            if (checked) {\n                state.itemToDelete = [...state.itemToDelete, value]\n            } else {\n            const newList = state.itemToDelete.filter(item => item != value);\n            state.itemToDelete = newList\n            }\n        },\n        \n        fetchTaskSuccess : (state, {payload = []}) => {\n            state.isPending = false\n            state.totalHour = payload.reduce((subTtl, row) => subTtl + +row.hr, 0)\n            state.taskList = payload.filter((noList) => noList.todo)\n            state.notToDoList = payload.filter((noList) => !noList.todo)\n\n        },\n        requestFail : (state, {payload}) => {\n            \n            state.isPending = false;\n            state.status = \"error\"\n            state.message = payload\n\n        }\n    }\n})\n\nconst {reducer, actions} = taskSlice\n\nexport const {requestPending,addTaskSuccess,requestFail,fetchTaskSuccess,updateTaskSuccess,setItemToDelete,deleteTaskSuccess} = actions;\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}