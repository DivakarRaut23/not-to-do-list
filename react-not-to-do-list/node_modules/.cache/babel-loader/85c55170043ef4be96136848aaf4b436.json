{"ast":null,"code":"import { requestPending, addTaskSuccess, requestFail, fetchTaskSuccess, updateTaskSuccess, deleteTaskSuccess } from './taskSlice.js';\nimport { createTask, deleteTaskLists, getTaskLists, switchTask } from '../../api/taskApi.js';\nexport const addTask = formData => async dispatch => {\n  try {\n    dispatch(requestPending());\n    const result = await createTask(formData);\n    dispatch(addTaskSuccess(result));\n    result.status === \"success\" && dispatch(fetchTaskLists());\n  } catch (error) {\n    dispatch(requestFail(error.message));\n  }\n};\nexport const fetchTaskLists = () => async dispatch => {\n  try {\n    dispatch(requestPending());\n    const fetchTask = (await getTaskLists()) || [];\n    dispatch(fetchTaskSuccess(fetchTask));\n  } catch (error) {\n    dispatch(requestFail(error.message));\n  }\n};\nexport const taskSwitch = toUpdate => async dispatch => {\n  try {\n    dispatch(requestPending());\n    const result = await switchTask(toUpdate);\n    dispatch(updateTaskSuccess(result));\n    result.status === \"success\" && dispatch(fetchTaskLists());\n  } catch (error) {\n    dispatch(requestFail(error.message));\n  }\n};\nexport const deleteTasks = ids => async dispatch => {\n  try {\n    if (window.confirm(\"Are you sure want to delete the selected items? \")) {\n      dispatch(requestPending());\n      const result = await deleteTaskLists(ids);\n      dispatch(deleteTaskSuccess(result));\n      result.status === \"success\" && dis;\n    }\n  } catch (error) {\n    dispatch(requestFail(error.message));\n  }\n};","map":{"version":3,"sources":["/Users/thewalker/Documents/bootcamp/react-not-to-do-list/src/components/taskList/taskAction.js"],"names":["requestPending","addTaskSuccess","requestFail","fetchTaskSuccess","updateTaskSuccess","deleteTaskSuccess","createTask","deleteTaskLists","getTaskLists","switchTask","addTask","formData","dispatch","result","status","fetchTaskLists","error","message","fetchTask","taskSwitch","toUpdate","deleteTasks","ids","window","confirm","dis"],"mappings":"AAAA,SAAQA,cAAR,EAAuBC,cAAvB,EAAsCC,WAAtC,EAAmDC,gBAAnD,EAAoEC,iBAApE,EAAsFC,iBAAtF,QAA8G,gBAA9G;AACA,SAAQC,UAAR,EAAmBC,eAAnB,EAAmCC,YAAnC,EAAiDC,UAAjD,QAAkE,sBAAlE;AAEA,OAAO,MAAMC,OAAO,GAAGC,QAAQ,IAAI,MAAMC,QAAN,IAAkB;AACjD,MAAI;AACAA,IAAAA,QAAQ,CAACZ,cAAc,EAAf,CAAR;AACA,UAAMa,MAAM,GAAG,MAAMP,UAAU,CAACK,QAAD,CAA/B;AACAC,IAAAA,QAAQ,CAACX,cAAc,CAACY,MAAD,CAAf,CAAR;AAEAA,IAAAA,MAAM,CAACC,MAAP,KAAkB,SAAlB,IAA+BF,QAAQ,CAACG,cAAc,EAAf,CAAvC;AAEH,GAPD,CAOE,OAAOC,KAAP,EAAc;AACZJ,IAAAA,QAAQ,CAACV,WAAW,CAACc,KAAK,CAACC,OAAP,CAAZ,CAAR;AACH;AACJ,CAXM;AAaP,OAAO,MAAMF,cAAc,GAAG,MAAM,MAAMH,QAAN,IAAkB;AAClD,MAAI;AACAA,IAAAA,QAAQ,CAACZ,cAAc,EAAf,CAAR;AACA,UAAMkB,SAAS,GAAG,OAAMV,YAAY,EAAlB,KAAwB,EAA1C;AACAI,IAAAA,QAAQ,CAACT,gBAAgB,CAACe,SAAD,CAAjB,CAAR;AAEH,GALD,CAKE,OAAOF,KAAP,EAAc;AACZJ,IAAAA,QAAQ,CAACV,WAAW,CAACc,KAAK,CAACC,OAAP,CAAZ,CAAR;AAEH;AACJ,CAVM;AAYP,OAAO,MAAME,UAAU,GAAGC,QAAQ,IAAI,MAAMR,QAAN,IAAkB;AACpD,MAAI;AACAA,IAAAA,QAAQ,CAACZ,cAAc,EAAf,CAAR;AACA,UAAMa,MAAM,GAAG,MAAMJ,UAAU,CAACW,QAAD,CAA/B;AACAR,IAAAA,QAAQ,CAACR,iBAAiB,CAACS,MAAD,CAAlB,CAAR;AAEAA,IAAAA,MAAM,CAACC,MAAP,KAAkB,SAAlB,IAA+BF,QAAQ,CAACG,cAAc,EAAf,CAAvC;AAEH,GAPD,CAOE,OAAOC,KAAP,EAAc;AACZJ,IAAAA,QAAQ,CAACV,WAAW,CAACc,KAAK,CAACC,OAAP,CAAZ,CAAR;AAEH;AACJ,CAZM;AAcP,OAAO,MAAMI,WAAW,GAAIC,GAAD,IAAQ,MAAMV,QAAN,IAAkB;AACjD,MAAI;AACA,QAAGW,MAAM,CAACC,OAAP,CAAe,kDAAf,CAAH,EAEJ;AACQZ,MAAAA,QAAQ,CAACZ,cAAc,EAAf,CAAR;AACA,YAAMa,MAAM,GAAG,MAAMN,eAAe,CAACe,GAAD,CAApC;AACAV,MAAAA,QAAQ,CAACP,iBAAiB,CAACQ,MAAD,CAAlB,CAAR;AACAA,MAAAA,MAAM,CAACC,MAAP,KAAkB,SAAlB,IAA+BW,GAA/B;AAEH;AAKJ,GAdD,CAcE,OAAOT,KAAP,EAAc;AACZJ,IAAAA,QAAQ,CAACV,WAAW,CAACc,KAAK,CAACC,OAAP,CAAZ,CAAR;AAEH;AACJ,CAnBM","sourcesContent":["import {requestPending,addTaskSuccess,requestFail, fetchTaskSuccess,updateTaskSuccess,deleteTaskSuccess} from './taskSlice.js'\nimport {createTask,deleteTaskLists,getTaskLists, switchTask} from '../../api/taskApi.js'\n\nexport const addTask = formData => async dispatch => {\n    try {\n        dispatch(requestPending());\n        const result = await createTask(formData);\n        dispatch(addTaskSuccess(result))\n\n        result.status === \"success\" && dispatch(fetchTaskLists())\n        \n    } catch (error) {\n        dispatch(requestFail(error.message))\n    }\n}\n\nexport const fetchTaskLists = () => async dispatch => {\n    try {\n        dispatch(requestPending());\n        const fetchTask = await getTaskLists() || [];\n        dispatch(fetchTaskSuccess(fetchTask))\n        \n    } catch (error) {\n        dispatch(requestFail(error.message))\n        \n    }\n}\n\nexport const taskSwitch = toUpdate => async dispatch => {\n    try {\n        dispatch(requestPending());\n        const result = await switchTask(toUpdate);\n        dispatch(updateTaskSuccess(result));\n\n        result.status === \"success\" && dispatch(fetchTaskLists())\n        \n    } catch (error) {\n        dispatch(requestFail(error.message))\n        \n    }\n}\n\nexport const deleteTasks = (ids)=> async dispatch => {\n    try {\n        if(window.confirm(\"Are you sure want to delete the selected items? \")\n        )\n    {\n            dispatch(requestPending());\n            const result = await deleteTaskLists(ids)\n            dispatch(deleteTaskSuccess(result))\n            result.status === \"success\" && dis\n\n        }\n\n        \n        \n        \n    } catch (error) {\n        dispatch(requestFail(error.message))\n        \n    }\n}"]},"metadata":{},"sourceType":"module"}