{"ast":null,"code":"import React from'react';import{Alert}from'react-bootstrap';import{setItemToDelete}from'../taskList/taskSlice';import{useSelector,useDispatch}from'react-redux';import{taskSwitch}from'../taskList/taskAction';import{Table,Button}from'react-bootstrap';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export var NotToDoLists=function NotToDoLists(){var dispatch=useDispatch();var _useSelector=useSelector(function(state){return state.task;}),notToDoList=_useSelector.notToDoList;var totalSavedTime=notToDoList.reduce(function(subTtl,row){return subTtl+row.hr;},0);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Not to do Task\"}),/*#__PURE__*/_jsxs(Table,{striped:true,bordered:true,hover:true,size:\"sm\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Task\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Hours\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Action\"})]})}),/*#__PURE__*/_jsxs(\"tbody\",{children:[notToDoList===null||notToDoList===void 0?void 0:notToDoList.map(function(nt,index){return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsxs(\"td\",{children:[/*#__PURE__*/_jsx(\"input\",{onChange:function onChange(e){return dispatch(setItemToDelete(e.target));},defaultValue:nt._id,type:\"checkbox\"}),\"\",/*#__PURE__*/_jsx(\"label\",{children:nt.title})]}),/*#__PURE__*/_jsx(\"td\",{children:nt.hr}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(Button,{onClick:function onClick(){return dispatch(taskSwitch({_id:nt._id,todo:true}));},children:\" Add to Task \"})})]},nt._id);}),/*#__PURE__*/_jsx(\"tr\",{children:/*#__PURE__*/_jsx(\"td\",{colSpan:\"3\",children:/*#__PURE__*/_jsxs(Alert,{show:totalSavedTime>0,variant:\"success\",children:[\"Total Hours Saved : \",totalSavedTime]})})})]})]})]});};","map":{"version":3,"sources":["/Users/thewalker/Documents/bootcamp/full-stack-ntdl/react-not-to-do-list/src/components/notToDoLists/NotToDoLists.js"],"names":["React","Alert","setItemToDelete","useSelector","useDispatch","taskSwitch","Table","Button","NotToDoLists","dispatch","state","task","notToDoList","totalSavedTime","reduce","subTtl","row","hr","map","nt","index","e","target","_id","title","todo"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAQC,KAAR,KAAoB,iBAApB,CACA,OAAQC,eAAR,KAA8B,uBAA9B,CACA,OAAQC,WAAR,CAAqBC,WAArB,KAAuC,aAAvC,CACA,OAAQC,UAAR,KAAyB,wBAAzB,CACA,OAAQC,KAAR,CAAeC,MAAf,KAA4B,iBAA5B,C,6IAEA,MAAQ,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CAEjC,GAAMC,CAAAA,QAAQ,CAAGL,WAAW,EAA5B,CAFiC,iBAIXD,WAAW,CAAC,SAAAO,KAAK,QAAIA,CAAAA,KAAK,CAACC,IAAV,EAAN,CAJA,CAI1BC,WAJ0B,cAI1BA,WAJ0B,CAMjC,GAAMC,CAAAA,cAAc,CAAGD,WAAW,CAACE,MAAZ,CAAmB,SAACC,MAAD,CAASC,GAAT,QAAiBD,CAAAA,MAAM,CAAGC,GAAG,CAACC,EAA9B,EAAnB,CAAoD,CAApD,CAAvB,CAEE,mBACI,wCACA,sCADA,cAEA,MAAC,KAAD,EAAO,OAAO,KAAd,CAAe,QAAQ,KAAvB,CAAwB,KAAK,KAA7B,CAA8B,IAAI,CAAC,IAAnC,wBACA,oCACE,mCACE,4BADF,cAEE,6BAFF,cAGE,8BAHF,GADF,EADA,cAQN,yBACCL,WADD,SACCA,WADD,iBACCA,WAAW,CAAEM,GAAb,CAAiB,SAACC,EAAD,CAAIC,KAAJ,CAAc,CAElC,mBACI,mCACA,mCAAI,cACJ,QAAQ,CAAE,kBAACC,CAAD,QAAOZ,CAAAA,QAAQ,CAACP,eAAe,CAACmB,CAAC,CAACC,MAAH,CAAhB,CAAf,EADN,CAEJ,YAAY,CACCH,EAAE,CAACI,GAHZ,CAGiB,IAAI,CAAC,UAHtB,EAAJ,CAIa,EAJb,cAKA,uBAAQJ,EAAE,CAACK,KAAX,EALA,GADA,cAOA,oBAAKL,EAAE,CAACF,EAAR,EAPA,cAQA,iCACE,KAAC,MAAD,EACA,OAAO,CAAE,yBAAMR,CAAAA,QAAQ,CAACJ,UAAU,CAAC,CACbkB,GAAG,CAAEJ,EAAE,CAACI,GADK,CAEbE,IAAI,CAAE,IAFO,CAAD,CAAX,CAAd,EADT,2BADF,EARA,GAASN,EAAE,CAACI,GAAZ,CADJ,CAmBC,CArBE,CADD,cAwBF,iCACE,WAAI,OAAO,CAAC,GAAZ,uBACA,MAAC,KAAD,EAAO,IAAI,CAAEV,cAAc,CAAC,CAA5B,CAA8B,OAAO,CAAC,SAAtC,kCAAqEA,cAArE,GADA,EADF,EAxBE,GARM,GAFA,GADJ,CA4CH,CApDO","sourcesContent":["import React from 'react'\nimport {Alert} from 'react-bootstrap';\nimport {setItemToDelete} from '../taskList/taskSlice'\nimport {useSelector, useDispatch} from 'react-redux'\nimport {taskSwitch} from '../taskList/taskAction'\nimport {Table, Button} from 'react-bootstrap';\n\nexport  const NotToDoLists = () => {\n\n  const dispatch = useDispatch()\n\n  const {notToDoList} = useSelector(state => state.task)\n\n  const totalSavedTime = notToDoList.reduce((subTtl, row) => subTtl + row.hr,0)\n\n    return (\n        <>\n        <h2>Not to do Task</h2>\n        <Table striped bordered hover size=\"sm\">\n        <thead>\n          <tr>\n            <th>Task</th>\n            <th>Hours</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n  <tbody>\n  {notToDoList?.map((nt,index) => {\n\nreturn (\n    <tr key={nt._id}>\n    <td><input \n    onChange={(e) => dispatch(setItemToDelete(e.target))}\n    defaultValue=\n                {nt._id} type=\"checkbox\" />\n                {\"\"}\n    <label>{nt.title}</label></td>\n    <td>{nt.hr}</td>\n    <td>\n      <Button \n      onClick={() => dispatch(taskSwitch({\n                            _id: nt._id,\n                            todo: true,\n                          }))}> Add to Task </Button>\n      </td>\n    </tr>\n)\n\n})\n}\n<tr>\n  <td colSpan=\"3\">\n  <Alert show={totalSavedTime>0}variant=\"success\">Total Hours Saved : {totalSavedTime}</Alert>\n  </td>\n</tr>\n  </tbody>\n</Table>\n</>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}